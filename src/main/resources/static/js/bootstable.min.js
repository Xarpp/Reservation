"use strict";

async function fetchDataList(link) {
    try {
        const response = await fetch(link);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error:', error);
    }
}

function sendReservationToServer(data) {
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json;charset=utf-8'
      },
      body: JSON.stringify(data)
    };

    fetch('/api/reservation', options)
     .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
     .then(data => {
        console.log(data);
      })
     .catch(error => {
        console.error('Fetch error:', error);
      });


}


function showNotification(newText, success) {
    if (success) {
        var notificationElement = $('.success-alert');
        var colorPrimary = '#3c763d';
    } else {
        var notificationElement = $('.error-alert');
        var colorPrimary = '#721c24';
    }

    notificationElement.stop(true, true);
    notificationElement.find('p').text(newText);

    notificationElement.css('--notification-primary', colorPrimary);
    notificationElement.fadeIn(500).delay(2100).fadeOut(500);

    }

function IterarCamposEdit(t, n) {
    function i(t) {
        if (null == colsEdi) return !0;
        for (var n = 0; n < colsEdi.length; n++)
            if (t == colsEdi[n]) return !0;
        return !1
    }
    var o = 0;
    t.each(function() {
        o++;
        if ("buttons" != $(this).attr("name") && i(o - 1)) {
            n($(this), o - 1);
        }
    })
}


function FijModoNormal(t) {
    $(t).parent().find("#bAcep").hide(), $(t).parent().find("#bCanc").hide(), $(t).parent().find("#bEdit").show(), $(t).parent().find("#bElim").show(), $(t).parents("tr").attr("id", "")
}

function FijModoEdit(t) {
    $(t).parent().find("#bAcep").show(), $(t).parent().find("#bCanc").show(), $(t).parent().find("#bEdit").hide(), $(t).parent().find("#bElim").hide(), $(t).parents("tr").attr("id", "editing")
}

function FijModoCreate(t) {
    $(t).parent().find("#bAcep").show(), $(t).parent().find("#bCanc").hide(), $(t).parent().find("#bEdit").hide(), $(t).parent().find("#bElim").show(), $(t).parents("tr").attr("id", "editing")
}


function ModoEdicion(t) {
    return "editing" == t.attr("id")
}

function rowAcep(t) {
    var n = $(t).parents("tr"),
        i = n.find("td");

//    var data = {
//        reservationID: i.eq(0).text(),
//        user: i.eq(2).find('input, select').val(),
//        reservationDateStart: i.eq(3).find('input, select').val(),
//        reservationDateEnd: i.eq(4).find('input, select').val(),
//        platform: i.eq(5).find('input, select').val(),
//        hostId: i.eq(6).find('input, select').val(),
//        comment: i.eq(7).find('input, select').val(),
//        status: 2,
//    }

    const reservations = [
      {
        comment: "Comment1",
        dateCreate: "2024-04-16T21:00:00.000+00:00",
        deleted: false,
        hostId: {
          id: 15,
          name: "6"
        },
        platform: {
          name: "Telegram",
          platformID: 1
        },
        reservationDateEnd: "2024-04-28 00:00",
        reservationDateStart: "2024-04-28 00:00",
        reservationID: 1,
        reservationNumber: 1001,
        status: {
          name: "Ожидание",
          statusID: 2
        },
        user: "User1",
        userPlatformID: 101
      },
      // Add more reservations as needed
    ];

    // Проверяем, все ли поля, кроме первого, заполнены
    var allFieldsFilled = i.slice(1, -1).toArray().every(function(cell) {
        // Ищем как input, так и select внутри каждой ячейки
        return $(cell).find('input, select').val() !== '';
    });

    // Если все поля, кроме первого, заполнены, разрешаем выйти из режима редактирования
    if (allFieldsFilled) {
        ModoEdicion(n) && (IterarCamposEdit(i, function(t) {
            // Используем .find() для поиска как input, так и select
            var n;
            // Проверяем, есть ли у элемента select атрибут multiple
            if (t.find("select").attr('multiple') !== undefined) {
                // Для select с атрибутом multiple
                var selectedValues = t.find("select").find(':selected').map(function() {
                    return $(this).val();
                }).get().join(', ');
                n = selectedValues; // n теперь содержит строку с выбранными значениями, разделенными запятыми
            } else {
                // Для обычного select или input
                n = t.find("input, select").val();
            }
            t.html(n);
        }), FijModoNormal(t), params.onEdit(n));

        // Отправляем данные последней строки на сервер
        sendReservationToServer(reservations);

    } else {
        // Если есть пустые поля, кроме первого, выводим сообщение или выполняем другое действие
        showNotification("Обязательные поля не заполнены", false);
        i.slice(1).find('input, select').each(function() {
            if ($(this).val().trim() === '') {
                $(this).css('border', '1px solid red');
            } else {
                $(this).css('border', '1px solid #bdbdbd');
            }
        });
    }
}



function rowCancel(t) {
    var n = $(t).parents("tr"),
        i = n.find("td");
    ModoEdicion(n) && (IterarCamposEdit(i, function(t) {
        var n = t.find("div").html();
        t.html(n)
    }), FijModoNormal(t))
}

async function rowEdit(t, isCreating) {
    var platforms = await fetchDataList('/api/getPlatformList');
    var PCs = await fetchDataList('/api/getPcList');
    var n = $(t).parents("tr"),
        i = n.find("td");
    ModoEdicion(n) || (IterarCamposEdit(i, function(t, index) {
        var n = t.html(),
            i = '<div style="display: none;">' + n + "</div>",
            o = $('<input>').addClass('form-control input-sm').attr("value", n);
        switch(index) {
            case 2:
                o.attr("placeholder", "Имя пользователя")
                break;
            case 3:
                o.attr('type', 'datetime-local');
                break;
            case 4:
                o.attr('type', 'datetime-local');
                break;
            case 5:
                o = $('<select>').addClass('form-control input-sm');
                $.each(platforms, function(index, platform) {
                    var option = $('<option>').val(platform.platformID).text(platform.name);
                    // Проверяем, выбрано ли это значение ранее
                    if (n === platform.name) {
                        option.attr('selected', 'selected');
                    }
                    o.append(option);
                });
                break;
            case 6:
                o = $('<select>').addClass('form-control input-sm').attr('multiple', true).attr('id', 'multiple_dropdown');
                $.each(PCs, function(index, PC) {
                    var option = $('<option>').val(PC.id).text(PC.name);
                    // Проверяем, выбрано ли это значение ранее
                    if (n.includes(PC.name)) {
                        option.attr('selected', 'selected');
                    }
                    o.append(option);
                });
                break;
            case 7:
                o.attr("placeholder", "Комментарий")
                break;
        }

        t.html(i + o.prop('outerHTML'));
    }), isCreating ? FijModoCreate(t) : FijModoEdit(t));

    $('select[multiple]').multiselect({
        texts: {
            placeholder: '№ ПК'
        }
    });
}



function rowElim(t) {
    var cellValue = $(t).closest('tr').find('td:first').text();
    if (cellValue == "") {
        $(t).parents("tr").remove(), params.onDelete();
    } else {
        $.ajax({
            url: '/api/deleteRow',
            type: 'POST',
            data: { id: cellValue },
            success: function(response) {
                updateTable();
                showNotification(response, true);
            },
            error: function(response) {
                showNotification(response.responseText, false);
            }
        });
    }
}

function rowAgreg() {
    // Проверяем, есть ли пустые ячейки в последней строке
    var lastRow = $tab_en_edic.find("tbody tr:last");
    var isEmpty = lastRow.find('td:first').text().trim() === '';

    // Если последняя строка не пустая, добавляем новую строку
    if (!isEmpty) {
        var newRow = $("<tr></tr>");
        $tab_en_edic.find("thead tr").find("th").each(function() {
            var cellContent = "buttons" == $(this).attr("name") ? colEdicHtml : "<td></td>";
            newRow.append(cellContent);
        });
        $tab_en_edic.find("tbody").append(newRow);

        // Переводим новую строку в режим редактирования
        rowEdit(newRow.find("td:last-child").find("#bEdit"), true);
    } else {
        showNotification("Предыдущая строка не заполнена", false);
    }
}



function TableToCSV(t) {
    var n = "",
        i = "";
    return $tab_en_edic.find("tbody tr").each(function() {
        ModoEdicion($(this)) && $(this).find("#bAcep").click();
        var o = $(this).find("td");
        n = "", o.each(function() {
            "buttons" == $(this).attr("name") || (n = n + $(this).html() + t)
        }), "" != n && (n = n.substr(0, n.length - t.length)), i = i + n + "\n"
    }), i
}

var $delete_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#d0021b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>';
var $edit_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#f5a623" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"></path><polygon points="18 2 22 6 12 16 8 16 8 12 18 2"></polygon></svg>';
var $accept_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#24a94e" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
var $canseled_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#d0021b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"></line></svg>';

var $tab_en_edic = null,
    params = null,
    colsEdi = null,
    newColHtml = '<div class="btn-group pull-right"><button id="bAcep" type="button" class="btn btn-solid" style="display:none;" onclick="rowAcep(this);">'+ $accept_icon +'</button><button id="bCanc" type="button" class="btn btn-solid" style="display:none;" onclick="rowCancel(this);">'+ $canseled_icon +'</button><button id="bEdit" type="button" class="btn btn-solid" onclick="rowEdit(this, false);">' + $edit_icon + '</button><button id="bElim" type="button" class="btn btn-solid" onclick="rowElim(this);">'+ $delete_icon +'</button></div>',
	colEdicHtml = '<td name="buttons">' + newColHtml + "</td>";

$.fn.SetEditable = function(t) {

    if (!this.data('editable-initialized')) {

    }

    var thButton = '<th name="buttons"></th>';

    if (document.querySelector('th[name="buttons"]')) {
        thButton = "";
    }
    var n = {
        columnsEd: "2,3,4,5,6,7",
        $addButton: null,
        onEdit: function() {},
        onDelete: function() {},
        onAdd: function() {}
    };
    params = $.extend(n, t), this.find("thead tr").append(thButton), this.find("tbody tr").append(colEdicHtml), $tab_en_edic = this, null != params.$addButton && params.$addButton.off("click").on("click", function() {
        rowAgreg();
    }), null != params.columnsEd && (colsEdi = params.columnsEd.split(","));

    this.data('editable-initialized', true);
};
