"use strict";

async function fetchDataList(link) {
    try {
        const response = await fetch(link);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error:', error);
    }
}

function createOrUpdateReservation(data) {
    $.ajax({
        url: '/api/reservation',
        type: 'POST',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(data),
        success: function(response) {
            updateTable(params.status);
            showNotification(response, true);
        },
        error: function(jqXHR, textStatus, errorThrown) {
        var message =  "Неизвестная ошибка. Изменения не внесены.";
            try {
                message = jqXHR.responseText;
            } catch (e) {
                console.log(jqXHR)
            }
            showNotification(message, false);
        }
    });
}

function changeStatus(id, statusId, statusText) {
    $.ajax({
        url: '/api/changeStatus',
        type: 'PUT',
        data: {
            id: id,
            status: statusId
        },
        success: function(response) {
            updateTable(params.status);
            showNotification(response, true);
        },
        error: function(response) {
            showNotification(response.responseText, false);
        }
    });
}

function showNotification(newText, success) {
    if (success) {
        var notificationElement = $('.success-alert');
        var colorPrimary = '#3c763d';
    } else {
        var notificationElement = $('.error-alert');
        var colorPrimary = '#721c24';
    }

    notificationElement.stop(true, true);
    notificationElement.find('p').text(newText);

    notificationElement.css('--notification-primary', colorPrimary);
    notificationElement.fadeIn(500).delay(2100).fadeOut(500);

    }

function IterarCamposEdit(t, n) {
    function i(t) {
        if (null == colsEdi) return !0;
        for (var n = 0; n < colsEdi.length; n++)
            if (t == colsEdi[n]) return !0;
        return !1
    }
    var o = 0;
    t.each(function() {
        o++;
        if ("buttons" != $(this).attr("name") && i(o - 1)) {
            n($(this), o - 1);
        }
    })
}


function FijModoNormal(t) {
    $(t).parent().find("#bAcep").show(), $(t).parent().find("#bSave").hide(), $(t).parent().find("#bCanc").hide(), $(t).parent().find("#bEdit").show(), $(t).parent().find("#bElim").show(), $(t).parents("tr").attr("id", "")
}

function FijModoEdit(t) {
    $(t).parent().find("#bAcep").hide(), $(t).parent().find("#bSave").show(), $(t).parent().find("#bCanc").show(), $(t).parent().find("#bEdit").hide(), $(t).parent().find("#bElim").hide(), $(t).parents("tr").attr("id", "editing")
}

function FijModoCreate(t) {
    $(t).parent().find("#bAcep").hide(), $(t).parent().find("#bSave").show(), $(t).parent().find("#bCanc").hide(), $(t).parent().find("#bEdit").hide(), $(t).parent().find("#bElim").show(), $(t).parents("tr").attr("id", "editing")
}

function FijModoDelete(t) {
    $(t).parent().find("#bAcep").hide(), $(t).parent().find("#bSave").hide(), $(t).parent().find("#bCanc").hide(), $(t).parent().find("#bEdit").hide(), $(t).parent().find("#bElim").show(), $(t).parents("tr").attr("id", "editing")
}

function ModoEdicion(t) {
    return "editing" == t.attr("id")
}

function rowSave(t) {
    var n = $(t).parents("tr"),
        i = n.find("td");

    var hosts = i.eq(6).find('input, select').val();

    var hostsIdList = hosts.map(function(host) {
        return {
            id: host
        };
    });
    var data = {
        reservationID: i.eq(0).text(),
        user: i.eq(2).find('input, select').val(),
        reservationDateStart: i.eq(3).find('input, select').val(),
        reservationDateEnd: i.eq(4).find('input, select').val(),
        platform: {
            platformID: i.eq(5).find('input, select').val()
        },
        status: {
            statusID: 2
        },
        hosts: hostsIdList,
        comment: i.eq(7).find('input, select').val()
    };

    var allFieldsFilled = i.slice(1, -2).toArray().every(function(cell) {
        return $(cell).find('input, select').val() !== '';
    });

    if (allFieldsFilled) {
        createOrUpdateReservation(data);

    } else {
        showNotification("Обязательные поля не заполнены", false);
        i.slice(1, -1).find('input, select').each(function() {
            if ($(this).val() === '') {
                $(this).css('border', '1px solid red');
            } else {
                $(this).css('border', '1px solid #bdbdbd');
            }
        });
    }
}

function rowRestore(t) {
    var n = $(t).parents("tr"),
            i = n.find("td");
    var index = i.eq(0).text();
    changeStatus(index, 2);
}

function rowCancel(t) {
    var n = $(t).parents("tr"),
        i = n.find("td");
    ModoEdicion(n) && (IterarCamposEdit(i, function(t) {
        var n = t.find("div").html();
        t.html(n)
    }), FijModoNormal(t))
}

function rowAccept(t) {
    var n = $(t).parents("tr"),
            i = n.find("td");
    var index = i.eq(0).text();
    changeStatus(index, 1);
}

async function rowEdit(t, isCreating) {
    var platforms = await fetchDataList('/api/getPlatformList');
    var PCs = await fetchDataList('/api/getPcList');
    var n = $(t).parents("tr"),
        i = n.find("td");
    ModoEdicion(n) || (IterarCamposEdit(i, function(t, index) {
        var n = t.html(),
            i = '<div style="display: none;">' + n + "</div>",
            o = $('<input>').addClass('form-control input-sm').attr("value", n);
        switch(index) {
            case 2:
                o.attr("placeholder", "Имя пользователя")
                break;
            case 3:
                o.attr('type', 'datetime-local');
                break;
            case 4:
                o.attr('type', 'datetime-local');
                break;
            case 5:
                o = $('<select>').addClass('form-control input-sm');
                $.each(platforms, function(index, platform) {
                    var option = $('<option>').val(platform.platformID).text(platform.name);
                    if (n === platform.name) {
                        option.attr('selected', 'selected');
                    }
                    o.append(option);
                });
                break;
            case 6:
                o = $('<select>').addClass('form-control input-sm').attr('multiple', true).attr('id', 'multiple_dropdown');
                $.each(PCs, function(index, PC) {
                    var selectedPCs = n.split(", ");
                    var option = $('<option>').val(PC.id).text(PC.name);
                    $.each(selectedPCs, function(index, value) {
                        if (value === PC.name) {
                            option.attr('selected', 'selected');
                        }
                    });
                    o.append(option);
                });
                break;
            case 7:
                o.attr("placeholder", "Комментарий")
                break;
        }

        t.html(i + o.prop('outerHTML'));
    }), isCreating ? FijModoCreate(t) : FijModoEdit(t));

    $('select[multiple]').multiselect({
        texts: {
            placeholder: '№ ПК'
        }
    });
}



function rowElim(t) {
    var cellValue = $(t).closest('tr').find('td:first').text();
    if (cellValue == "") {
        $(t).parents("tr").remove(), params.onDelete();
    } else {
        $.ajax({
            url: '/api/deleteRow',
            type: 'POST',
            data: { id: cellValue },
            success: function(response) {
                updateTable(params.status);
                showNotification(response, true);
            },
            error: function(response) {
                showNotification(response.responseText, false);
            }
        });
    }
}

function rowAgreg() {
    var hasRows = $tab_en_edic.find("tbody tr").length > 0;

    if (!hasRows) {
        var newRow = $("<tr></tr>");

        $tab_en_edic.find("thead tr").find("th").each(function() {
            var cellContent = $(this).attr("name") === "buttons" ? buttonsHtmlEditMode : "<td></td>";
            newRow.append(cellContent);
        });

        rowEdit(newRow.find("td:last-child").find("#bEdit"), true);

        $tab_en_edic.find("tbody").append(newRow);
    } else {
        var lastRow = $tab_en_edic.find("tbody tr:last");
        var isEmpty = lastRow.find('td:first').text().trim() === '';

        if (!isEmpty) {
            var newRow = $("<tr></tr>");

            $tab_en_edic.find("thead tr").find("th").each(function() {
                var cellContent = $(this).attr("name") === "buttons" ? buttonsHtmlEditMode : "<td></td>";
                newRow.append(cellContent);
            });

            rowEdit(newRow.find("td:last-child").find("#bEdit"), true);

            $tab_en_edic.find("tbody").append(newRow);
        } else {
            showNotification("Предыдущая строка не заполнена", false);
        }
    }
}



var $delete_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#d0021b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>';
var $edit_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#f5a623" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"></path><polygon points="18 2 22 6 12 16 8 16 8 12 18 2"></polygon></svg>';
var $accept_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="#24a94e" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path></svg>';
var $canceled_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="transparent" stroke="#d0021b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"></line></svg>';
var $save_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="#42a8bf" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>';
var $restore_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="#2132cd" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"> <path d="M2.5 2v6h6M21.5 22v-6h-6"/><path d="M22 11.5A10 10 0 0 0 3.2 7.2M2 12.5a10 10 0 0 0 18.8 4.2"/></svg>';


var $tab_en_edic = null,
    params = null,
    colsEdi = null,
	newColHtmlNormalMode = '<div class="btn-group pull-right"><button id="bAcep" type="button" class="btn btn-solid" onclick="rowAccept(this);">'+ $accept_icon +'</button><button id="bSave" type="button" class="btn btn-solid" style="display:none;" onclick="rowSave(this);">'+ $save_icon +'</button><button id="bCanc" type="button" class="btn btn-solid" style="display:none;" onclick="rowCancel(this);">'+ $canceled_icon +'</button><button id="bEdit" type="button" class="btn btn-solid" onclick="rowEdit(this, false);">' + $edit_icon + '</button><button id="bElim" type="button" class="btn btn-solid" onclick="rowElim(this);">'+ $delete_icon +'</button></div>',
	buttonsHtmlNormalMode = '<td name="buttons">' + newColHtmlNormalMode + "</td>";

var	newColHtmlEditMode = '<div class="btn-group pull-right"><button id="bAcep" type="button" class="btn btn-solid" style="display:none; onclick="rowAccept(this);">'+ $accept_icon +'</button><button id="bSave" type="button" class="btn btn-solid"" onclick="rowSave(this);">'+ $save_icon +'</button><button id="bCanc" type="button" class="btn btn-solid" style="display:none;" onclick="rowCancel(this);">'+ $canceled_icon +'</button><button id="bEdit" type="button" class="btn btn-solid" style="display:none; onclick="rowEdit(this, false);">' + $edit_icon + '</button><button id="bElim" type="button" class="btn btn-solid"  onclick="rowElim(this);">'+ $delete_icon +'</button></div>',
    buttonsHtmlEditMode = '<td name="buttons">' + newColHtmlEditMode + "</td>";

var buttonsHtmlDeleteMode = '<td name="buttons"><div><button id="bRest" type="button" class="btn btn-solid"  onclick="rowRestore(this);">'+ $restore_icon +'</button><button id="bElim" type="button" class="btn btn-solid"  onclick="rowElim(this);">'+ $delete_icon +'</button></div></td>';

var buttonsHtmlRestoreMode = '<td name="buttons"><div><button id="bRest" type="button" class="btn btn-solid"  onclick="rowRestore(this);">'+ $restore_icon +'</button></div></td>';

$.fn.SetEditable = function(t) {

    if (!this.data('editable-initialized')) {

    }

    var thButton = '<th name="buttons"></th>';

    if (document.querySelector('th[name="buttons"]')) {
        thButton = "";
    }
    var n = {
        columnsEd: "2,3,4,5,6,7",
        $addButton: null,
        status: null,
        onEdit: function() {},
        onDelete: function() {},
        onAdd: function() {}
    };
    params = $.extend(n, t);
    this.find("thead tr").append(thButton);
    var buttonsHtmlMode;
    switch (params.status) {
        case 'canceled':
            buttonsHtmlMode = buttonsHtmlRestoreMode;
            break;
        case 'accepted':
            buttonsHtmlMode = buttonsHtmlDeleteMode;
            break;
        default:
            buttonsHtmlMode = buttonsHtmlNormalMode;
    }
    this.find("tbody tr").append(buttonsHtmlMode);
    $tab_en_edic = this;
    null!= params.$addButton && params.$addButton.off("click").on("click", function() {
        rowAgreg();
    });
    null!= params.columnsEd && (colsEdi = params.columnsEd.split(","));


    this.data('editable-initialized', true);
};
